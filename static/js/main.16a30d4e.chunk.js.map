{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","Grommet","full","theme","grommet","Box","fill","AppBar","position","Toolbar","direction","align","IconButton","edge","color","aria-label","Menu","Typography","variant","pad","justify","Heading","Text","TextField","style","alignSelf","placeholder","id","marginTop","Button","onClick","alert","marginLeft","height","overflow","Carousel","Image","fit","src","InfiniteScroll","items","Array","keys","map","i","heading","text","item","key","Paper","padding","size","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4WAiFeA,MA5Ef,WACE,OACE,kBAACC,EAAA,EAAD,CAASC,MAAI,EAACC,MAAOC,KACnB,kBAACC,EAAA,EAAD,CAAKC,KAAK,cACR,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACJ,EAAA,EAAD,CAAKC,KAAK,aAAaI,UAAU,MAAMC,MAAM,UAC3C,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQC,MAAM,UAAUC,aAAW,QAClD,kBAACC,EAAA,EAAD,OAEF,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,mDAOR,kBAACb,EAAA,EAAD,CAAKc,IAAI,SAASR,MAAM,SAASS,QAAQ,UACvC,kBAACC,EAAA,EAAD,+FAGA,kBAACC,EAAA,EAAD,6OAKA,kBAACjB,EAAA,EAAD,CAAKc,IAAI,SAAST,UAAU,OAC1B,kBAACa,EAAA,EAAD,CAAWC,MAAO,CAAEC,UAAW,cAAgBC,YAAY,kBAAkBC,GAAG,mBAChF,kBAACJ,EAAA,EAAD,CAAWC,MAAO,CAAEC,UAAW,UAAYC,YAAY,iBAAiBC,GAAG,eAAeT,QAAQ,WAClG,kBAACK,EAAA,EAAD,CAAWC,MAAO,CAAEI,UAAW,MAAOH,UAAW,YAAcC,YAAY,aAAaC,GAAG,iBAAiBT,QAAQ,aACpH,kBAACW,EAAA,EAAD,CAAQC,QAAS,WACfC,MAAM,8EACLP,MAAO,CAAEQ,WAAY,MAAOJ,UAAW,MAAOH,UAAW,YAAcP,QAAQ,YAAYJ,MAAM,WAFpG,0BAMF,kBAACQ,EAAA,EAAD,qIAIA,kBAACjB,EAAA,EAAD,CAAKC,KAAK,aAAaa,IAAI,SAASc,OAAO,QAAQC,SAAS,UAC1D,kBAACC,EAAA,EAAD,CAAU7B,MAAI,GACZ,kBAAC8B,EAAA,EAAD,CACEC,IAAI,QACJC,IAAI,0IAEN,kBAACF,EAAA,EAAD,CAAOC,IAAI,QAAQC,IAAI,wIACvB,kBAACF,EAAA,EAAD,CAAOC,IAAI,QAAQC,IAAI,8IAI7B,kBAACjC,EAAA,EAAD,CAAKc,IAAI,SAASR,MAAM,SAASS,QAAQ,UACvC,kBAACC,EAAA,EAAD,wHAKF,kBAAChB,EAAA,EAAD,CAAK6B,SAAS,OAAOf,IAAI,SAASR,MAAM,SAASS,QAAQ,UACvD,kBAACmB,EAAA,EAAD,CAAgBC,MAAO,YAAIC,MAAM,KAAMC,QAAQC,KAAI,SAAAC,GAAC,MAAK,CACvDC,QAAS,6BACTC,KAAM,kxBAEL,SAACC,EAAMH,GAAP,OACC,kBAACvC,EAAA,EAAD,CAAK2C,IAAKJ,EAAGzB,IAAI,SACf,kBAAC8B,EAAA,EAAD,CAAOzB,MAAO,CAAE0B,QAAS,QACvB,kBAAC7B,EAAA,EAAD,CAAS8B,KAAK,SAAUJ,EAAKF,SAC7B,kBAACvB,EAAA,EAAD,KAAOyB,EAAKD,cC3DRM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.16a30d4e.chunk.js","sourcesContent":["import React from 'react';\nimport { Grommet, grommet, Box, Text, Heading, InfiniteScroll, Image, Carousel } from 'grommet';\nimport { AppBar, Toolbar, IconButton, Typography, Paper, TextField, Button } from '@material-ui/core';\nimport { Menu as MenuIcon } from '@material-ui/icons';\n\nfunction App() {\n  return (\n    <Grommet full theme={grommet}>\n      <Box fill=\"horizontal\" >\n        <AppBar position=\"static\">\n          <Toolbar>\n            <Box fill=\"horizontal\" direction=\"row\" align=\"center\"  >\n              <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                <MenuIcon />\n              </IconButton>\n              <Typography variant=\"h6\">\n                Material and Grommet UI Example Application\n              </Typography>\n            </Box>\n          </Toolbar>\n        </AppBar>\n      </Box>\n      <Box pad=\"medium\" align=\"center\" justify=\"center\" >\n        <Heading>\n          I really like Material UI but I also really like Grommet so why not combine them both?\n        </Heading>\n        <Text>\n          Am I hip enough yet Mom? My Mom is pretty cool she rides a sticker\n          covered fixie bike and drinks Oat Milk lattes. She also writes Web Applications\n          with Ruby on Rails and insists my use of Node.js and Golang are too \"Mainstream\".\n        </Text>\n        <Box pad=\"medium\" direction=\"row\" >\n          <TextField style={{ alignSelf: \"flex-start\" }} placeholder=\"I will never be\" id=\"standard-basic\" />\n          <TextField style={{ alignSelf: \"center\" }} placeholder=\"as hip or cool\" id=\"filled-basic\" variant=\"filled\" />\n          <TextField style={{ marginTop: \"3vh\", alignSelf: \"flex-end\" }} placeholder=\"as my Mom.\" id=\"outlined-basic\" variant=\"outlined\" />\n          <Button onClick={() => {\n            alert('This website packs more logic in it than most websites in the early 2000s')\n          }} style={{ marginLeft: \"1vw\", marginTop: \"4vh\", alignSelf: \"flex-end\" }} variant=\"contained\" color=\"primary\">\n            Her name is Berenice.\n          </Button>\n        </Box>\n        <Text>\n          There is some pretty neat styling going on here there is use of flexbox,\n          margins and padding properties all packed into one.\n        </Text>\n        <Box fill=\"horizontal\" pad=\"medium\" height=\"large\" overflow=\"hidden\">\n          <Carousel fill>\n            <Image\n              fit=\"cover\"\n              src=\"https://images.unsplash.com/photo-1442560203426-76d17f20aa42?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=934&q=80\"\n            />\n            <Image fit=\"cover\" src=\"https://images.unsplash.com/photo-1558906018-ff9aca108795?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1867&q=80\" />\n            <Image fit=\"cover\" src=\"https://images.unsplash.com/photo-1514428631868-a400b561ff44?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1950&q=80\" />\n          </Carousel>\n        </Box>\n      </Box>\n      <Box pad=\"medium\" align=\"center\" justify=\"center\">\n        <Heading>\n          Be Careful there are 1000 posts of the same content below here\n          I'm just testing the InfiniteScroll components.\n          </Heading>\n      </Box>\n      <Box overflow=\"auto\" pad=\"medium\" align=\"center\" justify=\"center\" >\n        <InfiniteScroll items={[...Array(1000).keys()].map(i => ({\n          heading: \"Lorem ipsum dolor sit amet\",\n          text: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut pulvinar ac urna tempus ultricies. Maecenas ac arcu suscipit, aliquet diam sed, molestie nibh. Etiam mollis feugiat tellus, sed iaculis velit iaculis non. Nullam aliquet condimentum auctor. Etiam rutrum condimentum odio, sit amet placerat ante porttitor in. Morbi sit amet ex vel justo blandit imperdiet eget sit amet diam. Nunc sed justo justo. In hac habitasse platea dictumst. Fusce ac pretium diam. In et mollis urna, nec ornare erat. Donec congue, libero vitae finibus dictum, risus ex tempus elit, vitae cursus nisl nisi in libero. Donec eu posuere enim, a blandit arcu. Integer nisi orci, rhoncus in leo sit amet, laoreet ullamcorper purus. Aenean dolor tortor, egestas at est sit amet, facilisis viverra risus\",\n        }))} >\n          {(item, i) => (\n            <Box key={i} pad=\"small\" >\n              <Paper style={{ padding: \"2vw\" }} >\n                <Heading size=\"small\" >{item.heading}</Heading>\n                <Text>{item.text}</Text>\n              </Paper>\n            </Box>\n          )}\n        </InfiniteScroll>\n      </Box>\n    </Grommet>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}